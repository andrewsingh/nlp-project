#!/usr/bin/env python3

import nltk
import sys
from nltk.parse import CoreNLPParser

parser = CoreNLPParser(url='http://localhost:9000')
num_questions = int(sys.argv[2])
default_ques = 'What is the document about?'

QUESTIONS = [
    (('S', [
        ('NP', [
            ('NNP', [], 1)
        ], 1),
        ('VP', [
            ('VBZ', [], 1),
            ('VP', [
                ('VBN', [], 1),
                ('PP', [
                    ('IN', [], 1),
                    ('NP', [], 1)
                ], 2)
            ], 3)
        ], 4)
    ], 5), 'What {1} {0} {2} {3}?')
]


def match_pattern(parse_tree, pattern):

    if parse_tree.label() != pattern[0]:
        return([])

    if pattern[2] == 1:
        return [' '.join(parse_tree.leaves())]
    child = []

    for i, sub_tree in enumerate(parse_tree):
        if i >= len(pattern[1]):
            break
        child += match_pattern(sub_tree, pattern[1][i])

    if len(child) == pattern[2]:
        return child

    return []


def gen_ques(parsed_tree):
    questions = []
    pattern = QUESTIONS[0][0]
    re_phrase = QUESTIONS[0][1]
    for parse in parsed_tree:
        for p in parse:
            ques = match_pattern(p, pattern)
            if len(ques) == pattern[2]:
                questions.append(re_phrase.format(*ques))
    return(questions)


def process(file):
    lines = []
    PARSE_ALL = []
    with open(file, 'r', encoding='utf-8') as f:
        for i, line in enumerate(f):
            li = line.strip()
            if len(li) > 0:
                lines.append(li)

    sent_tokenized = nltk.sent_tokenize('.'.join(lines))
    word_tokenized = [nltk.word_tokenize(s) for s in sent_tokenized]
    for s in word_tokenized:
        parsed_sentence = next(parser.parse(s), None)
        PARSE_ALL.append(parsed_sentence)
    return(PARSE_ALL)


out = gen_ques(process(sys.argv[1]))
if len(out) == 0:
    out.extend([default_ques] * num_questions)
elif len(out) < num_questions:
    out = out + ([out[-1]] * (num_questions - len(out)))
elif len(out) > num_questions:
    out = out[:num_questions]


for i in out:
    print(i)
