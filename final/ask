#!/usr/bin/env python3

import spacy
import sys
from did_final import generate_questions
from answer import *



# Filter fn to grab sentences of various entities for pattern matching
def filter_sents_ner(doc, labels):
  def has_label(sent):
    sent_labels = [ent.label_ for ent in sent.ents]
    for label in labels:
      if label in sent_labels:
        return True
    return False

  if len(labels) > 0:	
    return [sent for sent in doc.sents if has_label(sent)]
  else:
    return [sent for sent in doc.sents if len(stem_and_lower(sent)) > 0]


def generate_who_qn(doc):
  questions = []
  seen_ents = ["BC"]
  for ent in doc.ents:
    if ent.label_ == "PERSON" and ent.text not in seen_ents:
      sub = ent[len(ent)-1].text
      sub_present =[i for i in seen_ents if sub in i]
      if len(sub_present) == 0: 
        seen_ents.append(ent.text)
        question_text = "Who is " + ent.text + "?"
        [matches1, matches2, matches_nsubjpass, matches_appos] = pattern_match(nlp(question_text), [ent], list(doc.sents), doc)
        if len(matches1) + len(matches2) + len(matches_nsubjpass) > 0:
            questions.append(question_text)
    
  return questions


def generate_what_qn(doc):
  questions = []
  seen_ents = ["BC"]
  for ent in doc.ents:
    if ent.label_ in ["ORG"] and ent.text not in seen_ents:
      seen_ents.append(ent.text)
      [matches1, matches2, matches_nsubjpass, matches_appos] = pattern_match(nlp("What is " + ent.text + "?"), [ent], list(doc.sents), doc)
      if len(matches1) + len(matches2) + len(matches_nsubjpass) > 0:
        left = ent[0]
        if left.text.lower() == "the":
          end = ent[len(ent)-1]
          if end.pos_ in ["NNS", "NNPS"]: 
            questions.append("What are " + ent.text + "?")
          else:
            questions.append("What is " + ent.text + "?")
        else:
          end = ent[len(ent)-1]
          if end.pos_ in ["NNS", "NNPS"]:
            questions.append("What are the " + ent.text + "?")
          else:
            questions.append("What is the " + ent.text + "?")

  return questions


def generate_simple_qns(doc):
  questions = []
  questions += generate_who_qn(doc)
  questions += generate_what_qn(doc)
  return questions


def score(qn):
  return score_question(qn, doc)



if __name__ == '__main__':
  args = sys.argv
  if len(args) >= 3:
    doc_path = str(sys.argv[1])
    text = get_text(doc_path)
    doc = nlp(text) 
    num_qns = int(sys.argv[2])
    qn_output1 = generate_simple_qns(doc)
    qn_output2 = generate_questions(doc_path)
    qn_output2.sort(key = score, reverse = True)
    if len(qn_output1) + len(qn_output2) <= num_qns:
      qn_output = qn_output1 + qn_output2
    else:
      split = round(num_qns / 5 * 3)
      if split >= len(qn_output1):
        split = len(qn_output1) 
      elif num_qns - split >= len(qn_output2):
        split = num_qns - len(qn_output2)
      qn_output = qn_output1[:split] + qn_output2[:(num_qns-split)]
    for i in qn_output:
      print(i)
      
